from analizator import Analizator
from additional_bill_info import billProject
from methods_analizator import AnalizatorMethod as am
import json

"""
–ó–∞–¥–∞—á–∞ –º–µ—Ç–æ–¥–∞ - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞ –ù–ê–ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–ö–°–¢–ê

"""

class AnswerMethod:

    def docx_answer(self):
        if len(self.answer.result)==0:
            my_message = f"""{self.info_message} 
*–ê–Ω–∞–ª—ñ–∑ —Ç–µ–≥—ñ–≤*: ‚úÖ –£ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"""

        else:
            my_message = f"""{self.info_message} 
*–ê–Ω–∞–ª—ñ–∑ —Ç–µ–≥—ñ–≤*: ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è  –£ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: """
            for i in self.answer.result:
                my_message = f'{my_message}{i} '
        
        return my_message
    
    def error_answer(self):
        
        my_message = f"""{self.info_message} 
*–ê–Ω–∞–ª—ñ–∑ —Ç–µ–≥—ñ–≤*: üö´ –£ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        
        return my_message
    
    def wrong_format_answer(self):
        
        my_message = f"""{self.info_message} 
*–ê–Ω–∞–ª—ñ–∑ —Ç–µ–≥—ñ–≤*: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—É. [–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ—Å–æ–±–∏—Å—Ç–æ]({self.answer.file_link})"""
        
        return my_message

    def no_file(self):
        
        my_message = f"""{self.info_message} 
*–ê–Ω–∞–ª—ñ–∑ —Ç–µ–≥—ñ–≤*: ‚ùå –¢–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ú–∏ —â–æ–≥–æ–¥–∏–Ω–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å, –ø—ñ—Å–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–∫—Å—Ç—É, —è–∫—â–æ –≤ –Ω—å–æ–º—É –±—É–¥—É—Ç—å –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞."""
        
        return my_message
    
    def wrong_request(self):
        my_message = '–ù–ï–ö–û–†–ï–ö–¢–ù–ò–ô –ó–ê–ü–ò–¢'
        
        return my_message
    
    def make_inline_keyboard(self, empty=False, **kwargs):
        if empty:
            kb = json.dumps({ "inline_keyboard":[[]]})
        else:
            dogs = []
            for arg in kwargs.values():
                dogs.append(arg)
            fa = []
            fa.append(dogs)
            ik = { "inline_keyboard":fa}
            kb = json.dumps(ik)
        return kb



class Answer(AnswerMethod):
   
    def __init__(self, link):
        self.answer = Analizator(link)
        self.law_name, self.law_number = am().get_atrrs(link)
        self.info_message = info_message = f'''üìë *–ù–æ–º–µ—Ä*:  üîó[{self.law_number}]({link})
        
‚úèÔ∏è *–ù–∞–∑–≤–∞*: {self.law_name}
'''
        
        if self.answer.status == 'ok':
            
            self.my_message = self.docx_answer()
           

        elif self.answer.status == 'error':
            self.my_message = self.docx_answer()
        
        elif self.answer.status == 'no_file':
            self.my_message = self.no_file()

        else:
            self.my_message = self.wrong_format_answer()

        self.my_message = f'''{self.my_message}

{billProject(link).chronology}

{billProject(link).committee}'''
            
    
    
    