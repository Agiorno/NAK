from ninox_log import send_log
from upload_bills import get_links, send_info, Bills
import json  
from answer import Answer, AnswerMethod
from update import Update

class NAK(Update):
    
    def __init__(self, bot_url, data):
        self.BOT_URL = bot_url #–∑–∞–±—Ä–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
        self.data = data  #–∑–∞–±—Ä–∞–ª–∏ –≤—Ö–æ–¥—è—â–∏–π json
        self.start()  #–∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ json (Update.start)
        self.bot_analize_bills_for_nak() #–≤–µ—Ä–Ω—É–ª–∏ –æ—Ç–≤–µ—Ç
        

    
    #CRM answer
    def generate_keyboard(self, bill, my_answer):
        
        if str(self.message) in bill.list_of_bills:
            self.text = bill.check_info(str(self.message))
            self.kb = AnswerMethod().make_inline_keyboard(empty=True)
        else:
            self.text = "–¶–µ–π –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ –±–∞–∑—ñ" 
            self.kb=AnswerMethod().make_inline_keyboard(option1 = { "text": "–î–æ–¥–∞—Ç–∏", "callback_data": "1" },
                                              option2 = { "text": "–ù–µ –¥–æ–¥–∞–≤–∞—Ç–∏", "callback_data": "2" })
        my_message = f'''{my_answer}

üìç *CRM*: {self.text}''' 

        return my_message
    
    #  –°—É—Ç—å: –≤—ã—Ç–∞—â–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫—ã.
    #  –≤ –∑–∞–ø—Ä–æ—Å–µ –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–≤–µ —Å—Å—ã–ª–∫–∏ - –æ–¥–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞ 
    #  - –∫–æ—Ä–æ—Ç–∫–∞—è, –≤—Ç–æ—Ä–∞—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç - –¥–ª–∏–Ω–Ω–∞—è. –ù–∞–º –Ω—É–∂–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è. 
    def get_url(self):
        url = ''
        for i in self.data['callback_query']['message']['entities']:
            if 'url' in i.keys():
                if url == '':
                    url = i['url']
                else:
                    if len(i['url'])<len(url):
                        url = i['url']
        return url

    def prepare_data_for_answer(self, link):

        self.bill = Bills() # –æ–±–Ω–æ–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤
        
        m = Answer(link) # —Å—Ñ–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –≤ –†–∞–¥–µ
        my_answer = m.my_message
        self.my_answer = self.generate_keyboard(self.bill, my_answer) # –ø–æ–¥–≤–µ–∑–∞–ª–∏ –∫ —Ç–µ–∫—Å—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        send_log(self.data, self.my_answer, m.law_name, m.law_number, link) # –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –Ω–∏–Ω–æ–∫—Å –ª–æ–≥(–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
        
        json_data = {
            "chat_id": self.chat_id,
            "text": self.my_answer,
            "reply_to_message_id": self.message_id,
            "parse_mode": 'markdown',
            'reply_markup': self.kb
        }

        return json_data
    
    
    def bot_analize_bills_for_nak(self):
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–± —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª —Å–∞–º –ø–æ —Å–µ–±–µ –∏ –±—ã–ª –Ω–µ –º–µ–Ω—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if  self.my_type == 'message':
            if len(self.message)>3:
                # –µ—Å–ª–∏ –¥–∞, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ã
                array = get_links(self.message)
                # –∏ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –∑–Ω–∞—á–∏—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if len(array)==0:
                    self.send_message(self.just_text(AnswerMethod().wrong_request()))
                # –∞ –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞, 
                 
                else:
                    # —Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                    for i in array:
                        answer_data = self.prepare_data_for_answer(i)
                        self.send_message(answer_data)
                        print('[–ù–ê–ö]: –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –£–°–ü–ï–®–ù–û')
            # –∞ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ–Ω—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –ø–æ—Å—ã–ª–∞–µ–º
            else:
                self.send_message(self.just_text(AnswerMethod().wrong_request()))

        # –∞ –µ—Å–ª–∏, —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
        elif self.my_type == 'callback_query':
            # —Ç–æ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –≤–æ –≤—Ç–æ—Ä–æ–º –≤—Ç–æ—Ä–æ–µ –∏—Ç–¥
            try:
                # —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å
                if self.message == "1":
                    url = self.get_url()
                    send_info(url)
                    self.send_message(self.just_text('–ó–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ CRM –≤ —Ä–æ–∑–¥—ñ–ª *Bills* (–ü–æ—Å—Ç—ñ–π–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥).'))
                    self.bill = Bills()
                # –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å
                else:
                    self.send_message(self.just_text('–ó–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω–∏–π –¥–æ –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä—ñ–Ω–≥—É'))
                
                # –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                self.edit_reply()
                print('[–ù–ê–ö]: –ö–õ–ê–í–ò–ê–¢–£–†–ê –£–î–ê–õ–ï–ù–ê')
                self.bill = Bills()
            
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ - –Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞ –Ω–∞—à—É –∫–Ω–æ–ø–∫—É, —Ç–æ –ø–æ—Å—ã–ª–∞–µ–º
            except KeyError:

                 self.send_message(self.just_text(AnswerMethod().wrong_request()))
        # –µ—Å–ª–∏ —ç—Ç–æ –∏ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É - –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!           
        else:
            pass